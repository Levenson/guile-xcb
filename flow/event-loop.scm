(define-module (flow event-loop)
  #:use-module (ice-9 curried-definitions)
  #:use-module (ice-9 receive)
  #:use-module (ice-9 control)
  #:use-module (srfi srfi-9)
  #:use-module (ice-9 q)
  #:export (solicit))

(define-public (make-tag data) (list data))

(define-public notify-param (make-parameter #f))
(define-public solicit-param (make-parameter #f))
(define-public post-param (make-parameter #f))

(define-public (notify tag val)
  (if (notify-param)
      ((notify-param) tag val)
      (error "event-loop: Call to notify outside an event-loop")))

(define* (solicit tag #:optional (proc *unspecified*))
  (if (solicit-param)
      ((solicit-param) tag proc)
      (error "event-loop: Call to solicit outside an event-loop")))

(define-public (post-to-event-loop thunk)
  (if (post-param)
      ((post-param) thunk)
      (error "event-loop: Call to post-to-event-loop outside an event-loop")))

(define-public (unsolicit tag) (solicit tag #f))

(define-public error-tag (make-tag 'error))
(define-public tick-tag (make-tag 'tick))

(define ((solicit-proc conts early post-q dispatcher) tag proc)
  (shift cont ((core-loop conts early post-q dispatcher) cont tag proc)))

(define ((notify-proc conts early) tag val)
  (if (eq? tag error-tag) (abort-to-prompt error-tag val))
  (let ((cont (hashq-ref conts tag)))
    (hashq-remove! conts tag)
    (if cont (cont val)
        (let ((earlies (or (hashq-ref early tag)
                           (hashq-set! early tag (make-q)))))
          (enq! earlies val)))))

(define ((post-proc post-queue) thunk) (q-push! post-queue thunk))

(define ((core-loop conts early post-q dispatcher) cont key proc)
  (define (dispatch-loop)
    (while (not (q-empty? post-q)) ((q-pop! post-q)))
    (let ((result (dispatcher)))
      (cond
       ((eq? cont (hashq-ref conts key)) (dispatch-loop))
       ((hashq-ref conts tick-tag) => (lambda (c) (c result)))
       (else result))))
  (define (on-miss)
    (hashq-set! conts key (if (unspecified? proc) cont proc))
    (if (unspecified? proc) (dispatch-loop) (cont #t)))
  (define (on-hit early-vals)
    (define val (deq! early-vals))
    (if (q-empty? early-vals) (hashq-remove! early key))
    ((if (unspecified? proc) cont proc) val))
  (cond
   ((not proc) (hashq-remove! conts key) (cont))
   ((hashq-ref early key) => on-hit)
   (else (on-miss))))

(define-public (do-event-loop dispatcher proc on-error)
  (define (run)
    (let ((conts (make-weak-key-hash-table))
          (early (make-weak-key-hash-table))
          (post-q (make-q)))
      (parameterize
          ((notify-param (notify-proc conts early))
           (solicit-param (solicit-proc conts early post-q dispatcher))
           (post-param (post-proc post-q)))
        (reset (proc)))))
  (call-with-prompt error-tag run on-error))

(define-public (notify-map reply-tags)
  (define not-ready (make-tag 'not-ready))
  (define replies
    (map (lambda (reply-tag) (cons reply-tag (make-parameter not-ready)))
         reply-tags))
  (define notify-tag (make-tag `(notify-map ,@reply-tags)))
  (define (update tag val)
    (define (eval-param param) (apply param '()))
    (define reply-param (assq-ref replies tag))
    (reply-param val)
    (let ((results (map-in-order eval-param (map-in-order cdr replies))))
      (if (not (memq not-ready results)) (notify notify-tag results))))
  (define (solicit-reply reply-tag)
    (solicit reply-tag (lambda (reply) (update reply-tag reply))))
  (for-each solicit-reply reply-tags)
  notify-tag)
